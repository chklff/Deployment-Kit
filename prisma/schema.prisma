generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Integration {
  id          Int      @id @default(autoincrement())
  name        String
  templateId  Int
  versionId   Int
  imageUrl    String   // URL to the image for the integration
  description String   // Short description of what the integration does
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  teamId    Int
  flows     Flow[]   @relation("UserFlows")
  webhooks  Webhook[] @relation("UserWebhooks")  // A user can have many webhooks

  @@map("users")
}

model Flow {
  id          Int      @id @default(autoincrement())
  flowId      String   @unique
  templateId  Int
  versionId   Int
  userId      Int
  publicUrl   String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  webhooks    Webhook[] @relation("FlowWebhook") // Flow can have multiple Webhooks
  user        User     @relation("UserFlows", fields: [userId], references: [id])

  @@map("flows")
}

model Action {
  id             Int      @id @default(autoincrement())
  actionName     String   @unique
  templateId     Int
  versionId      Int
  dataSpec       Json     // JSON object to store the expected structure of the data
  webhooks       Webhook[] @relation("ActionWebhooks")  // Actions related to webhooks

  @@map("actions")
}

model Webhook {
  id           Int      @id @default(autoincrement())
  flowId       Int
  actionId     Int
  userId       Int      // Webhooks are specific to a user
  url          String
  scenarioId   String
  integrationId String
  isActive     Boolean  @default(true)
  flow         Flow     @relation("FlowWebhook", fields: [flowId], references: [id])
  action       Action   @relation("ActionWebhooks", fields: [actionId], references: [id])
  user         User     @relation("UserWebhooks", fields: [userId], references: [id])  // Webhook belongs to a specific user

  @@map("webhooks")
}
